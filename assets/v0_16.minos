sintaxis = 0.16;

/* Commentary Example */



/* -----------------------------------------------
The next block describes a resource named `User`
with an only one environment named `DEFAULT`.

If the `DEFAULT` block exist, will be apply in every 
authorization process.

----------------------------------------------- */
resource User {
    env DEFAULT {
        policy {
            allow = ["create", "read", "update", "delete"];

            rule {
                actor.type = RootUser;
            }

            rule {
                actor.type = resource.type;
                actor.id = resource.id;
            }
        }
    }
}


/* -----------------------------------------------
The next block describes a resource named `User`
without environments. 

In this case, the code will be parsed equals to 
previous example but in this case the 
`DEFAULT` block is implicit.

----------------------------------------------- */
resource User {
    policy {
        allow = ["create", "read", "update", "delete"];

        rule {
            actor.type = RootUser;
        }

        rule {
            actor.type = resource.type;
            actor.id = resource.id;
        }
    }
}

/* -----------------------------------------------
The next block describes a resource named `User`
with two environments: `Testing` and `Production`.
Is important to mention that when exist two or more 
environment, use the implicit `DEFAULT` isn't possible.

Since in this case the `DEFAULT` block not exists and is
necessary to indicate the environment's name in the 
authorization process.

About the rules, we can see, how in the `Testing` environment, a 
`RootUser` can manipulate the `Users`, but in 
`Production` only the `User` can manipulate it self.

----------------------------------------------- */
resource User {
    env Testing {
        policy {
            allow = ["create", "read", "update", "delete"];

            rule {
                actor.type = RootUser;
            }

            rule {
                actor.type = resource.type;
                actor.id = resource.id;
            }
        }
    }

    env Production {
        policy {
            allow = ["create", "read", "update", "delete"];

            rule {
                actor.type = resource.type;
                actor.id = resource.id;
            }
        }
    }
}

/* -----------------------------------------------
The following block describes a resource called `User`
with two environments: `DEFAULT` and `Testing`.

This is a new implementation for the previous example,
but using the `DEFAULT` environment. In this case 
we know that there is only one "special" environment 
environment (`Testing`) and since the policies in 
`DEFAULT` do not contradict the "special" rules in 
`Testing`; therefore, its possible to reuse the policies.

----------------------------------------------- */
resource User {
    env DEFAULT {
        policy {
            allow = ["create", "read", "update", "delete"];

            rule {
                actor.type = resource.type;
                actor.id = resource.id;
            }
        }
    }

    env Testing {
        policy {
            allow = ["create", "read", "update", "delete"];

            rule {
                actor.type = RootUser;
            }
        }
    }
}